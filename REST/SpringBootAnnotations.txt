
Good Link for almost all the useful annotations in spring
=========================================================
https://springframework.guru/spring-framework-annotations/

===============================================================================
@ComponentScan : 
Ans: https://dzone.com/articles/spring-component-scan

We will start by writing few components.

DemoBeanA.java:
---------------
    package guru.springframework.blog.componentscan.example.demopackageA;
    import org.springframework.stereotype.Component;
    @Component("demoBeanA")
    public class DemoBeanA {
    }


DemoBeanB1.java:
----------------
    package guru.springframework.blog.componentscan.example.demopackageB;
    import org.springframework.stereotype.Component;
    @Component("demoBeanB1")
    public class DemoBeanB1 {
    }


DemoBeanB2.java:
---------------
    package guru.springframework.blog.componentscan.example.demopackageB;
    import org.springframework.stereotype.Component;
    @Component("demoBeanB2")
    public class DemoBeanB2 extends DemoBeanB1{
    }


DemoBeanB3.java:
------------------
    package guru.springframework.blog.componentscan.example.demopackageB;
    import org.springframework.stereotype.Component;
    @Component("demoBeanB3")
    public class DemoBeanB3 extends DemoBeanB2{
    }


DemoBeanC.java:
---------------
    package guru.springframework.blog.componentscan.example.demopackageC;
    import org.springframework.stereotype.Component;
    @Component("demoBeanC")
    public class DemoBeanC {
    }


DemoBeanD.java:
---------------
    package guru.springframework.blog.componentscan.example.demopackageD;
    import org.springframework.stereotype.Component;
    @Component("demoBeanD")
    public class DemoBeanD {
    }


The @SpringBootApplication Annotation
--------------------------------------
Spring needs to know which packages to scan for annotated components in order 
to add them to the IoC container. In a Spring Boot project, we typically set 
the main application class with the @SpringBootApplication annotation. Under 
the hood, @SpringBootApplication is a composition of the @Configuration, 
@ComponentScan, and @EnableAutoConfiguration annotations. With this default 
setting, Spring Boot will auto scan for components in the current package 
(containing the @SpringBoot main class) and its sub packages.

Note: It is recommended that you locate your main application class in a root 
package above the component classes of the application.

The code to create the main class and access components is:

BlogPostsApplication.java
--------------------------
package guru.springframework.blog;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.ApplicationContext;

@SpringBootApplication
public class BlogPostsApplication {
    public static void main(String[] args) {
        ApplicationContext context = SpringApplication.run(BlogPostsApplication.class,args);
            System.out.println("Contains A  "+context.
                    containsBeanDefinition("demoBeanA"));
            System.out.println("Contains B2  " + context.
                    containsBeanDefinition("demoBeanB2"));
            System.out.println("Contains C   " + context.
                    containsBeanDefinition("demoBeanC"));
    }
}


After running the main class all the classes in the subpackages of the main 
class BlogPostsApplication are auto scanned by Spring.

@ComponentScan: Identifying Base Packages
The @ComponentScan annotation is used with the @Configuration annotation to 
tell Spring the packages to scan for annotated components. @ComponentScan 
also used to specify base packages and base package classes using 
thebasePackageClasses or basePackages attributes of @ComponentScan.

The basePackageClasses attribute is a type-safe alternative to basePackages. 
When you specify basePackageClasses, Spring will scan the package 
(and subpackages) of the classes you specify. 

A Java class annotated with @ComponentScan with the basePackageClassesattribute is:

BlogPostsApplicationWithComponentScan.java:
----------------------------------------------
package guru.springframework.blog;
import guru.springframework.blog.componentscan.example.demopackageB.DemoBeanB1;
import org.springframework.boot.SpringApplication;
import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;

@Configuration
@ComponentScan(basePackages = {
        "guru.springframework.blog.componentscan.example.demopackageA",
        "guru.springframework.blog.componentscan.example.demopackageD",
        "guru.springframework.blog.componentscan.example.demopackageE"
    },
    basePackageClasses = DemoBeanB1.class)
public class BlogPostsApplicationWithComponentScan {
    public static void main(String[] args) {
        ApplicationContext context = SpringApplication.
        run(BlogPostsApplicationWithComponentScan.class, args);
        System.out.println("Contains A  " + context.containsBeanDefinition("demoBeanA"));
        System.out.println("Contains B2  " + context.containsBeanDefinition("demoBeanB2"));
        System.out.println("Contains C   " + context.containsBeanDefinition("demoBeanC"));
        System.out.println("Contains D   " + context.containsBeanDefinition("demoBeanD"));
    }
}


The output of running the main class is:
Output of BlogPostsApplicationWithComponentScan.java Class

The @ComponentScan annotation uses the basePackages attribute to specify three 
packages (and subpackages) that will be scanned by Spring. The annotation also 
uses the basePackageClasses attribute to declare the DemoBeanB1 class whose 
package Spring Boot should scan.

As demoBeanC is in a different package, Spring did not find it during component 
scanning.

Component Scanning Filters
You can configure component scanning by using different type filters that Spring 
provides.

By using filters, you can further narrow the set of candidate components from 
everything in basePackages to everything in the base packages that matches the 
given filter or filters.

Filters can be of two types: include and exclude filters. As their names suggest, 
include filters specify which types are eligible for component scanning, while 
exclude filters specify which types are not.

You can use the include and/or exclude filters with or without the default filter. 
To disable the default filter, set the useDefaultFilters element of the 
@ComponentScan annotation to false.

The code to disable the default filter is:

BlogPostsApplicationDisablingDefaultFilters.java:

package guru.springframework.blog;
import org.springframework.boot.SpringApplication;
import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
@Configuration
@ComponentScan(value = "guru.springframework.blog.componentscan.example.demopackageA",
        useDefaultFilters = false)
public class BlogPostsApplicationDisablingDefaultFilters {
    public static void main(String[] args) {
        ApplicationContext context = SpringApplication.
                run(BlogPostsApplicationDisablingDefaultFilters.class,args);
            System.out.println("Contains A  " + context.containsBean("demoBeanA"));
    }
}


In the preceding code, the value member defines the specific 
guru.springframework.blog.componentscan.example.demopackageA package to scan, while 
the useDefaultFilters member disables the default filter.

The output of running the main class is:
Output of BlogPostsApplicationDisablingDefaultFilters.java Class

As you can see, the class DemoBeanA in the package demopackageA is unavailable when 
the useDefaultFilters element of the @ComponentScan annotation is set to false.

Component Scanning Filter Types

Spring provides the FilterType enumeration for the type filters that may 
be used in conjunction with @ComponentScan.

The available FilterType values are:

1. FilterType.ANNOTATION: Include or exclude those classes with a stereotype annotation
2. FilterType.ASPECTJ: Include or exclude classes using an AspectJ type pattern expression
3. FilterType.ASSIGNABLE_TYPE: Include or exclude classes that extend or implement this class or interface
4. FilterType.REGEX: Include or exclude classes using a regular expression
5. FilterType.CUSTOM: Include or exclude classes using a custom implementation of the org.springframework.core.type.TypeFilter interface

Include Filters
----------------
With include filters, you can include certain classes to be scanned by Spring. 
To include assignable type, use the includeFilters element of the @ComponentScan 
annotation with FilterType.ASSIGNABLE_TYPE. Using this filter, you can instruct 
Spring to scan for classes that extends or implements the class or interface you specify.

The code to use the includeFilters element of @ComponentScan is:

BlogPostsApplicationIncludeFilter.java:

package guru.springframework.blog;
import guru.springframework.blog.componentscan.example.demopackageB.DemoBeanB2;
import org.springframework.boot.SpringApplication;
import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.FilterType;
@Configuration
@ComponentScan(basePackages = {"guru.springframework.blog.componentscan.example.demopackageA",
        "guru.springframework.blog.componentscan.example.demopackageB"},
        includeFilters = @ComponentScan.Filter(type = FilterType.ASSIGNABLE_TYPE, value = DemoBeanB2.class),
        useDefaultFilters = false)
public class BlogPostsApplicationIncludeFilter {
    public static void main(String[] args) {
        ApplicationContext context = SpringApplication.
                run(BlogPostsApplicationIncludeFilter.class,args);
            System.out.println("Contains A  " + context.containsBean("demoBeanA"));
            System.out.println("Contains B1  " + context.containsBean("demoBeanB1"));
            System.out.println("Contains B2  " + context.containsBean("demoBeanB2"));
            System.out.println("Contains B3  " + context.containsBean("demoBeanB3"));
    }
}


The output of running the main class is:
Output of BlogPostsApplicationIncludeFilter.java Class

As shown in the preceding figure, Spring detected and used the demoBean3 
component that extends demoBean2.

Include Filters Using Regex
You can use regular expressions to filter out components to be scanned by 
Spring. Use the includeFiltersnested annotation @ComponentScan.Filter type 
FilterType.REGEXto set a pattern.

The code to use an exclude filter based on regular expression is:

BlogPostsApplicationFilterTypeRegex.java:

package guru.springframework.blog;
import org.springframework.boot.SpringApplication;
import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.FilterType;
@Configuration
@ComponentScan(useDefaultFilters = false, includeFilters = @ComponentScan.Filter
        (type = FilterType.REGEX, pattern = ".*[A2]"))
public class BlogPostsApplicationFilterTypeRegex {
    public static void main(String[] args) {
        ApplicationContext context = SpringApplication.
                run(BlogPostsApplicationFilterTypeRegex.class,args);
            System.out.println("Contains A  " + context.containsBean("demoBeanA"));
            System.out.println("Contains B1  " + context.containsBean("demoBeanB1"));
            System.out.println("Contains B2  " + context.containsBean("demoBeanB2"));
    }
}


The output of the following code snippet is:
Output of BlogPostsApplicationFilterTypeRegex.java Class
As shown in the preceding figure, the classes whose names end with A or 2 
are detected by Spring.

Exclude Filters
The @ComponentScan annotation enables you to exclude those classes that you 
do not want to scan.

The code to use an exclude filter is:

BlogPostsApplicationExcludeFilter.java:

package guru.springframework.blog;
import guru.springframework.blog.componentscan.example.demopackageB.DemoBeanB1;
import guru.springframework.blog.componentscan.example.demopackageB.DemoBeanB2;
import org.springframework.boot.SpringApplication;
import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.FilterType;
@Configuration
@ComponentScan(basePackageClasses = {DemoBeanB1.class},
        excludeFilters = @ComponentScan.Filter(type = FilterType.ASSIGNABLE_TYPE,
                value = DemoBeanB2.class))
public class BlogPostsApplicationExcludeFilter {
    public static void main(String[] args) {
        ApplicationContext context = SpringApplication.
                run(BlogPostsApplicationExcludeFilter.class,args);
            System.out.println("Contains B1  " + context.containsBean("demoBeanB1"));
            System.out.println("Contains B2  " + context.containsBean("demoBeanB2"));
    }
}


In this code, the nested annotation @ComponentScan.Filter is used to specify 
the filter type as FilterType.ASSIGNABLE_TYPE and the base class that should 
be excluded from scanning.
The class DemoBeanB2 has been excluded from being scanned.


===============================================================================
@EntityScan



===============================================================================
@Bean
Ans:
In Spring, the objects that form the backbone of your application and that 
are managed by the Spring IoC container are called beans. A bean is an object 
that is instantiated, assembled, and otherwise managed by a Spring IoC 
container.


===============================================================================
@Configuration
Ans: https://www.journaldev.com/21033/spring-configuration-annotation

Spring @Configuration annotation is part of the spring core framework. Spring 
Configuration annotation indicates that the class has @Bean definition methods. 
So Spring container can process the class and generate Spring Beans to be used 
in the application.

Spring @Configuration
Spring @Configuration annotation allows us to use annotations for dependency 
injection. Let’s understand how to create Spring Configuration classes.

Let’s create a simple java bean class.

    package com.journaldev.spring;
    public class MyBean {
        public MyBean() {
            System.out.println("MyBean instance created");
        }
    }

Before we use any of the Spring framework classes, we will have to add it’s 
dependencies to the maven project.

<dependency>
		<groupId>org.springframework</groupId>
		<artifactId>spring-context</artifactId>
		<version>5.0.6.RELEASE</version>
</dependency>

Now let’s create the Spring Configuration class.

    package com.journaldev.spring;
    import org.springframework.context.annotation.Bean;
    import org.springframework.context.annotation.Configuration;

    @Configuration
    public class MyConfiguration {
        @Bean
        public MyBean myBean() {
            return new MyBean();
        }
    }

Let’s write a simple class and configure our simple Spring configuration class.

    package com.journaldev.spring;
    import org.springframework.context.annotation.AnnotationConfigApplicationContext;
    public class MySpringApp {
        public static void main(String[] args) {
            AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();
            ctx.register(MyConfiguration.class);
            ctx.refresh();
            // MyBean mb1 = ctx.getBean(MyBean.class);
            // MyBean mb2 = ctx.getBean(MyBean.class);
            ctx.close();
        }
    }

If you run above application, it will produce output like this:


May 23, 2018 12:34:54 PM org.springframework.context.support.AbstractApplicationContext prepareRefresh
INFO: Refreshing org.springframework.context.annotation.AnnotationConfigApplicationContext@ff5b51f: 
startup date [Wed May 23 12:34:54 IST 2018]; root of context hierarchy
MyBean instance created
May 23, 2018 12:34:54 PM org.springframework.context.support.AbstractApplicationContext doClose
INFO: Closing org.springframework.context.annotation.AnnotationConfigApplicationContext@ff5b51f: 
startup date [Wed May 23 12:34:54 IST 2018]; root of context hierarchy


Notice that Spring loads beans into it’s context before we have even requested
it. This is to make sure all the beans are properly configured and application 
fail-fast if something goes wrong.
Also ctx.refresh() must be called, otherwise we will get following error when 
we will try to get any bean from the context.


Exception in thread "main" java.lang.IllegalStateException: 
org.springframework.context.annotation.AnnotationConfigApplicationContext@f0f2775 has not been refreshed yet
	at org.springframework.context.support.AbstractApplicationContext.assertBeanFactoryActive(AbstractApplicationContext.java:1076)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1106)
	at com.journaldev.spring.MySpringApp.main(MySpringApp.java:11)

If you uncomment the statements where I am getting MyBean instances, you will
notice that it’s not calling the constructor of MyBean. It’s because the 
default scope of spring beans is Singleton. We can change it using @Scope 
annotation.

What if we remove @Configuration annotation?

What will happen if we remove the @Configuration annotation from 
MyConfiguration class. You will notice that it still works as expected and 
spring beans are registered and retrieved as singleton classes. But in 
this case, if we make a call to myBean() method then it will be a plain 
java method call and we will get a new instance of MyBean and it won’t 
remain singleton. To prove this point, let’s define another bean that will
be using MyBean instance.

    package com.journaldev.spring;
    public class MyBeanConsumer {
        public MyBeanConsumer(MyBean myBean) {
            System.out.println("MyBeanConsumer created");
            System.out.println("myBean hashcode = "+myBean.hashCode());
        }
    }

Our updated Spring Configuration class is:

    package com.journaldev.spring;
    import org.springframework.context.annotation.Bean;
    import org.springframework.context.annotation.Configuration;

    //@Configuration
    public class MyConfiguration {

        @Bean
        public MyBean myBean() {
            return new MyBean();
        }
        
        @Bean
        public MyBeanConsumer myBeanConsumer() {
            return new MyBeanConsumer(myBean());
        }
    }

Now when we run the MySpringApp class, it generates following output.

MyBean instance created
MyBean instance created
MyBeanConsumer created
myBean hashcode = 1647766367


So MyBean is not singleton anymore, now let’s annotate MyConfiguration with 
@Configuration annotation again and run the MySpringApp class. This time 
output will be like below.


MyBean instance created
MyBeanConsumer created
myBean hashcode = 1095088856

So it’s better to use @Configuration annotation with configuration classes 
to make sure our spring container is behaving like the way we want it to.
If you don’t want to use @Configuration annotation for some weird reasons, 
we can still create our configuration class by not calling the myBean() 
method and rather using an instance variable of MyBean configured through 
@Autowired annotation. Something like below code will work as well.

    package com.journaldev.spring;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.context.annotation.Bean;
    import org.springframework.context.annotation.Configuration;

    //@Configuration
    public class MyConfiguration {
        @Autowired
        MyBean myBean;
        @Bean
        public MyBean myBean() {
            return new MyBean();
        }
        @Bean
        public MyBeanConsumer myBeanConsumer() {
            return new MyBeanConsumer(myBean);
        }
    }

That’s all for Spring Configuration annotation, we will look into other spring 
annotations in future posts.


===============================================================================
@EnableAutoConfiguration
===============================================================================



